project:
  name: "buildfab-version"
  modules:
    - "version"

actions:
  - name: version-check
    run: scripts/version check

  - name: version-greatest
    run: scripts/version check-greatest

  - name: version-module
    run: |
      for module in $(scripts/version modules); do
        echo "Checking module: bin/$module"
        module_version=$(bin/$module -V 2>/dev/null || echo "")
        if [ -z "$module_version" ]; then
          echo "Could not get version from bin/$module -V"
          exit 1
        fi
        # Strip 'v' prefix from module version for comparison
        module_version_clean=$(echo "$module_version" | sed 's/^v//')
        # Get expected version directly from scripts/version
        expected_version=$(scripts/version version)
        if [ "$module_version_clean" != "$expected_version" ]; then
          echo "Version mismatch: bin/$module reports $module_version, expected $expected_version"
          echo "To check manually run: bin/$module -V"
          exit 1
        fi
        echo "âœ“ bin/$module version matches: $module_version"
      done

  - name: run-tests
    run: go test ./... -v -race

  - name: git-untracked
    uses: git@untracked

  - name: git-uncommitted
    uses: git@uncommitted

  - name: git-modified
    uses: git@modified

stages:
  pre-push:
    steps:
      - action: version-check
      - action: version-greatest

      # Always run version module validation
      - action: version-module
      
      # Run tests only for release versions
      - action: run-tests
        only: [release]
        require: [version-module]
      
      # Run Git checks for all versions      
      - action: git-untracked
      - action: git-uncommitted
      - action: git-modified
        onerror: warn
