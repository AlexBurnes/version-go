#!/usr/bin/env bash

VERSION="0.2"

version_release='^v?[0-9]+\.[0-9]+\.[0-9]+$'
version_prerelease='^v?[0-9]+\.[0-9]+\.[0-9]+(\-|\~)(alpha|beta|rc|pre)(\.[0-9]+|\_[a-zA-Z]+(\.[0-9]+)*)*$'
version_postrelease='^v?[0-9]+\.[0-9]+\.[0-9]+\.(fix|next|post)(\.[0-9]+|\_[a-zA-Z]+(\.[0-9]+)*)*$'
version_intermediate='^v?[0-9]+\.[0-9]+\.[0-9]+\_[a-zA-Z]+(\.[0-9]+|\_[a-zA-Z]+(\.[0-9]+)*)*$'

set -o nounset
set -o errexit

########################################################################################################################
# Help

function help {
   echo -e "version_check check that version is set correct accortding to project rules, ci-templates/common/v?"
   echo -e "usage: version_check [-h|--help] [-v|--version] version"
   echo -e "options:"
   echo -e "    -h|--help        print this help and exit"
   echo -e "    -v|--verbose     verbose output"
   echo -e "    -V|--version     print version number"
   echo -e "    -r|--rules       print regexp rules for check versions and exit"
   echo -e "    -d|--debug       debug output"
   echo -e "    -t|--type        output version type: release, prerelease, postrelease, intermediate"   
   echo -e "    -b|--build-type  output build type for cmake: Release for release version, Debug for other"
   echo -e "    -c|--conan-preset  output type for cmake preset: conan-release for release version, conan-debug for other"
   echo -e "    --no-color     no colored output"
   echo -e "arguments:"
   echo -e "    version        version string to check"
}

########################################################################################################################
# Setup colors

function setup_colors {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        clre="\e[0m" black='\e[30m' red='\e[31m' green='\e[32m' yellow='\e[33m' blue='\e[34m' magenta='\e[35m' 
        cyan='\e[36m' gray='\e[37m' white='\e[38m' bold='\e[1m' blink='\e[5m]'
    else
        clre='' red='' green='' orange='' blue='' purple='' cyan='' yellow='' bold='' blink=''
    fi
}

########################################################################################################################
# Logging functions

lg() {
    echo -e "${1-}"
}

le() {
    echo >&2 -e "${red}${bold}ERROR${clre}${red}: ${1-}${clre}"
}

lw() {
    echo -e "${purple}WARNING: ${1-}${clre}"
}

ld() {
    if [[ ! -z "${DEBUG-}" && "${DEBUG-}" -gt 0 ]]; then
        echo -e "${yellow}${bold}#DEBUG${clre}${yellow}: ${1-}${clre}"
    fi
}

########################################################################################################################
# Global variables

DEBUG=0
OUTPUT_TYPE=0
OUTPUT_BUILD_TYPE=0
OUTPUT_CONAN_PRESET=0

########################################################################################################################
# Main fuinctions


function check_version {
    version=${1-}
    ld "check version '${version}'"
    if [[ -z "${version}" ]]; then
        le "no version argument provided"
        exit 1
    fi
    if [[ "${version}" =~ $version_release ]]; then
        ld "version ${version} is release"
        if [[ ${OUTPUT_TYPE} -eq 1 ]]; then
            echo 'Release'
        fi
        if [[ ${OUTPUT_CONAN_PRESET} -eq 1 ]]; then
            echo 'conan-release'
        fi
        if [[ ${OUTPUT_BUILD_TYPE} -eq 1 ]]; then
            echo 'Release'
        fi
        exit 0
    fi
    if [[ "${version}" =~ $version_prerelease ]]; then
        ld "version ${version} is pre release"
        if [[ ${OUTPUT_TYPE} -eq 1 ]]; then
            echo 'Pre release'
        fi
        if [[ ${OUTPUT_CONAN_PRESET} -eq 1 ]]; then
            echo 'conan-debug'
        fi
        if [[ ${OUTPUT_BUILD_TYPE} -eq 1 ]]; then
            echo 'Debug'
        fi
        exit 0
    fi
    if [[ "${version}" =~ $version_postrelease ]]; then
        ld "version ${version} is post release"
        if [[ ${OUTPUT_TYPE} -eq 1 ]]; then
            echo 'Post release'
        fi
        if [[ ${OUTPUT_CONAN_PRESET} -eq 1 ]]; then
            echo 'conan-debug'
        fi
        if [[ ${OUTPUT_BUILD_TYPE} -eq 1 ]]; then
            echo 'Debug'
        fi
        exit 0
    fi
    if [[ "${version}" =~ $version_intermediate ]]; then
        ld "version ${version} is intermediate"
        if [[ ${OUTPUT_TYPE} -eq 1 ]]; then
            echo 'Intermediate release'
        fi
        if [[ ${OUTPUT_CONAN_PRESET} -eq 1 ]]; then
            echo 'conan-debug'
        fi
        if [[ ${OUTPUT_BUILD_TYPE} -eq 1 ]]; then
            echo 'Debug'
        fi
        exit 0
    fi
    le "wrong version '$version'"
    exit 1
}

function rules_print {
    lg "version rules in precedence order:"
    lg "    release:     $version_release"
    lg "    prerelease:  $version_prerelease"
    lg "    postrelease: $version_postrelease"
    lg "    itermediate: $version_intermediate"
    exit 0
}

setup_colors
while :; do
    case "${1-}" in
        -h|--help)
           help
           exit 0
           ;;
        -v|--verbose)
           set -x 
           ;;
        -d|--debug)
           DEBUG=1
           ;;
        -c|--conan-preset)
           OUTPUT_CONAN_PRESET=1
           ;;
        -t|--type)
           OUTPUT_TYPE=1
           ;;
        -b|--buid-type)
           OUTPUT_BUILD_TYPE=1
           ;;
        -r|--rules)
           rules_print
           ;;
        -no-color)
           NO_COLOR=1
           setup_colors
           ;;
        -V|--version)
           echo $VERSION
           exit 0
           ;;
        -?*)
           le "wrong option: ${1-}"
           help
           exit 1
           ;;
        *)
           check_version ${1-}
           break ;;
    esac
    shift
done

le "${red}no version argument provided${clre}"
exit 1
